/*
 * finalize pls.c
 *
 * Created: 6/15/2021 6:17:19 AM
 * Author : ACULA_SAM
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>
#define F_CPU 16000000UL
#include <util/delay.h>
#include <stdlib.h>
#include <string.h>
#include <avr/lcd4bits.h>
#include <avr/LCD.h>

#define  Trigger_pin	PIND0	/* Trigger pin */
int TimerOverflow;


int main(void)
{
	char string[10];
	char Dist[10] = "Distance:", unit[] = "cm";
	char Maintain[10] = "Keep 6ft away", Warning[] = "Mind the Gap";
	long count;
	double distance;
	DDRB = 0xff;
	DDRD = 0x01;
	PORTD = 0xff;
	DDRD |= 1<<PIND5;
	DDRC &=~1<<PINC2;
	sei();			/* Enable global interrupt */
	TIMSK0 = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
	TCCR1A = 0;		/* Set all bit to zero Normal operation */
	
	lcd_init();
	while(1)
	{
		/* Give 10us trigger pulse on trig. pin to HC-SR04 */
		PORTD |= (1 << Trigger_pin);
		_delay_us(10);
		PORTD &= (~(1 << Trigger_pin));
		
		TCNT1 = 0;	/* Clear Timer counter */
		TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
		TIFR0 = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
		TIFR0 = 1<<TOV1;	/* Clear Timer Overflow flag */

		/*Calculate width of Echo by Input Capture (ICP) */
		
		while ((TIFR0 & (1 << ICF1)) == 0);/* Wait for rising edge */
		TCNT1 = 0;	/* Clear Timer counter */
		TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
		TIFR0 = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
		TIFR0 = 1<<TOV1;	/* Clear Timer Overflow flag */
		TimerOverflow = 0;/* Clear Timer overflow count */

		while ((TIFR0 & (1 << ICF1)) == 0);/* Wait for falling edge */
		count = ICR1 + (65535 * TimerOverflow);	/* Take count */
		/* 16MHz Timer freq, sound speed =343 m/s */
		distance =(double)count /1000;
		dtostrf(distance, 2, 10, string);/* distance to string */
		strcat(string, unit);	/* Concat unit i.e.cm */
		strcat(Dist, string);
		_delay_ms(200);
		if (distance == 100);
			puts(Dist);
			puts(Maintain);
			_delay_ms(200);
		if (distance != 100);
			puts(Dist);
			puts(Warning);
			_delay_ms(200);
	}
}
